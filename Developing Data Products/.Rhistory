}
}
for(i in 1:nrow(complete_cases)){
print(i)
if (monitor_data[i,]$nobs>threshold){
corr<-append(corr, cor(files[i, 2], files[i, 3], use="pairwise.complete.obs"))
}
}
monitor_data[1,]$nobs
class(monitor_data)
monitor_data[1]
cpmplete_cases
complete_cases
cpmplete_cases
cpmplete_cases
complete_cases
corr<-function(directory, threshold=0){
if (identical(directory, "specdata")==T) {
monitor_data<-complete("specdata", 1:332)
complete_cases<-as.data.frame(monitor_data[1])
files<-as.data.frame(monitor_data[2])
}
corr<-c()
for(i in 1:nrow(complete_cases)){
if (complete_cases[i,]$nobs>threshold){
corr<-append(corr, cor(files[i, 2], files[i, 3], use="pairwise.complete.obs"))
}
}
return (corr)
}
x<-corr("specdata", 400)
x
complete_cases
max(complete_cases$nobs)
sort(complete_cases$nobs)
sort(complete_cases)
sort(complete_cases, order(nobs)]
sort(complete_cases, order(nobs))
?sort
x<-complete_cases[order(nobs),]
class(complete_cases)
class(nobs)
head(complete_cases, 1)
x<-complete_cases[order(complete_cases$nobs),]
x
corr("specdata", 1094)
files[154,2]
files[154,]
files[155,]
head(files)
complete_cases
complete_cases$nobs>1093
complete_cases$nobs>1093==T
complete_cases$nobs>1093=T
(complete_cases$nobs>1093)=T
if (complete_cases$nobs>1093){}
if (complete_cases$nobs>1093){c}
if (complete_cases$nobs>1093){c
if (complete_cases$nobs>1093){c}
sfsfjwojerow j
if (complete_cases$nobs>1093)
{c<-append(c,complete_cases$id)
print (c)
}
c
c<-c()
if (complete_cases$nobs>1093)
{c<-append(c,complete_cases$id)
print(c)
}
complete_cases$nobs
if (complete_cases$nobs[1]>1093)
{c<-append(c,complete_cases$id)
print(c)
}
if (complete_cases$nobs[1]>500)
+ {c<-append(c,complete_cases$id)
+ print(c)
+ }
if (complete_cases$nobs[1]>500)
{c<-append(c,complete_cases$id)
print(c)
}
c
for (i in 1:nrow(complete_cases)){}
for (i in 1:nrow(complete_cases)){
if (complete_cases$nobs[i]>500){}
c<-append(c,complete_cases$id)
print(c)
}
complete_cases
complete_cases$nobs[1:332]
complete_cases$nobs[1:400]
complete_cases$nobs[1:nrow(complete_cases)]
c<-c()
for (i in 1:nrow(complete_cases)){
if (complete_cases$nobs[i]>500){
c<-append(c,complete_cases$id[i])
}
print (c)
}
c<-c()
for (i in 1:nrow(complete_cases)){
if (complete_cases$nobs[i]>500){
c<-append(c,complete_cases$id[i])
}
#print (c)}
}
head(c)
length(c)
c
c<-c()
for (i in 1:nrow(complete_cases)){
if (complete_cases$nobs[i]>1090){
c<-append(c,complete_cases$id[i])
}
#print (c)}
}
c
head(files,3)
d<-files(files$ID=1)
d<-files$ID=1
d<-files[,files$ID=1]
d<-files[,files$ID==1]
d<-files[files$ID==1,]
class(d)
nrow(d)
head(d,2)
d<-files[files$ID==1,files$sulfate]
d<-files[files$ID==1,]
d<-files[files$ID==1,]
d<-files[files$ID==1,]$sulfate
head(d,3)
d
corr<-function(directory, threshold=0){
if (identical(directory, "specdata")==T) {
monitor_data<-complete("specdata", 1:332)
complete_cases<-as.data.frame(monitor_data[1])
files<-as.data.frame(monitor_data[2])
}
corr<-c()
c<-c()
for (i in 1:nrow(complete_cases)){
if (complete_cases$nobs[i]>threshold){
c<-append(c,complete_cases$id[i])
}
}
for(j in c){
sulphate<-files[files$ID==j,]$sulfate
nitrate<-files[files$ID==j,]$nitrate
corr<-append(corr, cor(sulfate, nitrate, use="pairwise.complete.obs"))
}
return (corr)
}
corr("specdata", 1094)
corr<-function(directory, threshold=0){
if (identical(directory, "specdata")==T) {
monitor_data<-complete("specdata", 1:332)
complete_cases<-as.data.frame(monitor_data[1])
files<-as.data.frame(monitor_data[2])
}
corr<-c()
c<-c()
for (i in 1:nrow(complete_cases)){
if (complete_cases$nobs[i]>threshold){
c<-append(c,complete_cases$id[i])
}
}
for(j in c){
sulfate<-files[files$ID==j,]$sulfate
nitrate<-files[files$ID==j,]$nitrate
corr<-append(corr, cor(sulfate, nitrate, use="pairwise.complete.obs"))
}
return (corr)
}
corr("specdata", 1094)
corr("specdata", 500)
cr<-corr("specdata", 400)
head(cr)
corr<-function(directory, threshold=0){
if (identical(directory, "specdata")==T) {
monitor_data<-complete("specdata", 1:332)
complete_cases<-as.data.frame(monitor_data[1])
files<-as.data.frame(monitor_data[2])
}
corr<-c()
c<-c()
for (i in 1:nrow(complete_cases)){
if (complete_cases$nobs[i]>threshold){
c<-append(c,complete_cases$id[i])
}
}
for(j in c){
sulfate<-files[files$ID==j,]$sulfate
nitrate<-files[files$ID==j,]$nitrate
corr<-append(corr, cor(sulfate, nitrate, use="pairwise.complete.obs"))
}
return (round(corr, 5))
}
cr<-corr("specdata", 400)
head(cr)
summary(cr)
?summary
summary(cr, digits=4)
summary(cr, digits=3)
cr<-corr("specdata", 150)
head(cr)
summary(cr, digits=3)
cr<-corr("specdata", 5000)
corr<-function(directory, threshold=0){
if (identical(directory, "specdata")==T) {
monitor_data<-complete("specdata", 1:332)
complete_cases<-as.data.frame(monitor_data[1])
files<-as.data.frame(monitor_data[2])
}
corr<-c()
c<-c()
for (i in 1:nrow(complete_cases)){
if (complete_cases$nobs[i]>threshold){
c<-append(c,complete_cases$id[i])
}
}
for(j in c){
sulfate<-files[files$ID==j,]$sulfate
nitrate<-files[files$ID==j,]$nitrate
corr<-append(corr, cor(sulfate, nitrate, use="pairwise.complete.obs"))
}
return (corr)
}
cr<-corr("specdata", 5000)
length(cr)
summary(cr, digits=3)
summary(cr)
cr
summary(cr)
?summary
class(cr)
cr<-corr("specdata")
head(cr)
head(cr, digits=4)
head(cr, digits=3)
summary(cr)
length(cr)
a<-1
test_f<-function(name){
b<-a+name
print(b)}
test_f(5)
?par
?plot
?lines
?boxplot
?boxplot
?hist
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
head(Bodyweight)
Bodyweight
data(Bodyweight)
head(Diet)
head(lattice)
data(Diet)
set.seed(1234)
par(mar=c(0,0,0,0))
?par
x<-rnorm(12,mean=rep(1:3, each=4),sd=0.2)
x
sd( 0.7585869 1.0554858 1.2168882 0.5308605)
sd( 0.7585869, 1.0554858 ,1.2168882 ,0.5308605)
sd(c( 0.7585869, 1.0554858 ,1.2168882 ,0.5308605))
rep(1:3)
rep(1:3, each=4)
?rnorm
class(x)
mean(x[1:4])
sd(x[1:4])
sd(x[5:8])
mean(x[5:8])
mean(x[9:12])
sd(x[9:12])
y<-rnorm(12,mean=rep(C(1,2,1), each=4),sd=0.2)
y<-rnorm(12,mean=rep(C(1,2,1), each=4),sd=0.2)
rep(C(1,2,1), each=4)
C(1,2,1)
y<-rnorm(12,mean=rep(C(1,2,1), each=4),sd=0.2)
y<-rnorm(12,mean=rep(c(1,2,1), each=4),sd=0.2)
plot(x,y, col="blue", pch=19, cex=2)
plot(x,y, col="blue", pch=25, cex=2)
plot(x,y, col="blue", pch=19, cex=2)
plot(x,y, col="blue", pch=19, cex=14)
plot(x,y, col="blue", pch=19, cex=2)
text(x+0.05, y+0.05, labels=as.character(1:12))
df<-data.frame(x=x, y=y)
dist(df)
hclust(dist(df))
plot(hclust(dist(df)))
install.packages("grDevices")
install.packages("grDevices")
pollution <- read.csv("data/avgpm25.csv", colClasses = c("numeric", "character",
"factor", "numeric", "numeric"))
head(pollution)
library(swirl)
swirl()
head(ravenData)
sum(ravenData$ravenWinNum[ravenScore>23])
sum(ravenData[ravenScore>23])
sum(ravenData[ravenData$ravenScore>23])
sum(ravenData$ravenWinNum)
sum(ravenData$ravenWinNum==1 & ravenData$ravenScore>23)
View(ravenData)
mdl<-glm(ravenWinNum~ravenScore, binomial, ravenData)
lodds<-predict(mdl, data.frame(ravenscore=c(0,3,6)))
lodds<-predict(mdl, data.frame(ravenScore=c(0,3,6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
exp(confint(md1))
exp(confint(mdl))
anova(mdl)
qchisq(0,95,1)
qchisq(0.95,1)
data(mtcars)
p <- t.test(mpg8, mpg6, paired = FALSE, alternative="two.sided", var.equal=TRUE)$p.value
mixprob <- (n8 - 1) / (n8 + n6 - 2)
s <- sqrt(mixprob * s8 ^ 2  +  (1 - mixprob) * s6 ^ 2)
z <- (m8 - m6) / (s * sqrt(1 / n8 + 1 / n6))
pz <- 2 * pnorm(-abs(z))
## Hand calculating the T just to check
#2 * pt(-abs(z), df = n8 + n6 - 2)
mpg8=(mtcars)
?t.test
?quinf
?qunif
qunif(0,75,0,1)
qunif(0.75,0,1)
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
sum(temp$x * temp$p)  / length(x)
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
tempx
sum(temp$X * temp$p)  / length(x)
class(temp)
sum(x * p)
sum(x * p) /4
a=0.75*0.3
b=0.48*0.7
a/(a+b)
ppois(10, 15)
ppois(10, 15, lower.tail=t)
ppois(10, 15, lower.tail=T)
qnorm(0.95, 1100,75)
pbinom(4, n=5, 0.5)
?pbinom
pbinom(4, size=5, prob=0.5)
pbinom(4, size=5, prob=0.5, lower.tail=F)
pbinom(3, size=5, prob=0.5, lower.tail=F)
qnorm(0.95, 1100, 75)
?qnorm
qnorm(0.95, 1100, 75, lower.tail=T)
qnorm(0.95, 1100, 75, lower.tail=F)
qnorm(0.95, 1100, 75, lower.tail=T)
qnorm(0.95, 1100, 75, lower.tail=T)
rnorm(100, 1100, 75)
qnorm(0.95, 1100, 75, lower.tail=T)
qnorm(0.95, 1100, 75/10, lower.tail=T)
1100+c(-1,1)*qt(0.975,8)*30/3
2+qt(0.975,8)*sd/3
-6/qt(0.975,8)
6/qt(0.975,8)
-2+c(-1,1)*qt(0.95, 9)*sqrt(0.6/100 + 0.68/100)
-2+c(-1,1)*qt(0.975, 9)*sqrt(0.6/100 + 0.68/100)
sp=sqrt((9*0.6 + 9*0.68)/16)
-2+c(-1,1)*qt(0.975, 16)*sp*sqrt(2/10)
sp=sqrt((9*0.6 + 9*0.68)/18)
-2+c(-1,1)*qt(0.975, 18)*sp*sqrt(2/10)
-2+c(-1,1)*qnorm(0.975)*0.1*sqrt(0.25+4)
-2+c(-1,1)*qnorm(0.975)*sqrt(0.25/100+4/100)
-2+c(-1,1)*qnorm(0.95)*sqrt(0.25/100+4/100)
2+c(-1,1)*qt(0.975, 18)*sp*sqrt(2/10)
sp=sqrt((8*2.25 + 8*3.24)/16)
-2+c(-1,1)*qt(0.975, 16)*sp*sqrt(2/9)
-4+c(-1,1)*qt(0.975, 16)*sp*sqrt(2/9)
-4+c(-1,1)*qt(0.95, 16)*sp*sqrt(2/9)
a= c(140,138,150, 148,135)
b= c(132, 135, 151, 146, 130)
t.test(b,a, 4)
t.test(b,a)
var(a)
var(b)
t.test(b,a, paired=T)
1100+c(-1,1)*qt(0.025)*10
1100+c(-1,1)*qt(0.025,8)*10
pbinom(2,size=4, prob=0.75, lower.tail=F)
pbinom(3,size=4, prob=0.75, lower.tail=F)
?pbinom
?choose
choose(3,4)*0.75^3  * 0.25 + choose(4,4)*0/75^4
choose(3,4)*0.75^3  * 0.25 + choose(4,4)*0.75^4
ppois(9,1787/100)
ppois(9,1787*0.01, lower.tail=F)
ppois(9,1787, lower.tail=F)
1-ppois(9,1787*0.01, lower.tail=F)
ppois(9,1787, lower.tail=F)
ppois(9,1787*0.01, lower.tail=F)
ppois(9,1787*0.01, lower.tail=T)
ppois(9,1787*0.01, lower.tail=F)
rpois(9,1787*0.01, lower.tail=F)
ppois(9,1787*0.01, lower.tail=F)
ppois(9,1787*0.01)
ppois(10,1787*0.01, lower.tail=F)
ppois(10,1787*0.01, lower.tail=T)
ppois(10-1,1787*1, lower.tail=T)
ppois(10-1,1787*0.01, lower.tail=T)
ppois(10-1,1787*0.01, lower.tail=F)
poisson.test(10, 1787, 1/100, alternative="greater")
poisson.test(9, 1787, 1/100, alternative="greater")
poisson.test(10,T=1787,r=1/100,alternative="l")
?poisson.test
?power.t.test
power.t.test(delta=0.01,sd=0.04,power=0.9, alternative="one.sided", sig.level=0.05)
power.t.test(delta=0.01,sd=0.04,power=0.9, alternative="one.sided", sig.level=0.05, type="one.sample")
1077=m-qnorm(0.95)*sd/3
1123=m+qnorm(0.95)*sd/3
m=(1123+1077)/2
sd=(1123-m)*3/qnorm(0.95)
m
1078+qnorm(0.975)*sd/3
?t.test
?pnorm
pnorm(1078,m,sd,lower.tail=T)
power.t.test(n=100,delta=0.01,sd=0.04, alternative="one.sided", sig.level=0.05)
power.t.test(n=100,delta=0.01,sd=0.04, alternative="one.sided", sig.level=0.05, type="one.sided")
power.t.test(n=100,delta=0.01,sd=0.04, alternative="one.sided", sig.level=0.05, type="one.sample")
sp=sqrt((8*2.25 + 8*3.24)/16)
-4+c(-1,1)*qnorm(0.975)*sp*sqrt(2/9)
ts=(-4)/sp
2*pnorm(-abs(ts))
m1 <- -3; m2 <- 1
n1=n2=9
s1=1.5;s2=1.8
se <- sqrt(s1*s1 / n1 + s2*s2 / n2)
se
ts=(m2-m1)/se
pv=2
pv=2*pnorm(-abs(ts))
pv
install.packages("shiny")
library(shiny)
library(swirl)
swirl()
fit<-lm(y~x, out2)
plot(fit,which=1)
fitno<-out2[-1,]
fitno<-lm(y~x,out2[-1,])
plot(fit,which=1)
plot(fitno,which=1)
plot(fitno,which=1)
plot(fitno,which=1)
plot(fit)
plot(fitno,which=1)
bye()
swirl()
plot(fitno, which=1)
slidify("index.Rmd")
dob=as.Date("1985-07-25")
dob
class(dob)
slidify("index.Rmd")
library(slidify)
slidify("index.Rmd")
setwd("C:/Users/rohit/Desktop/Coursera Data Science Specialization/Developing Data Products/Developing Data Products")
slidify("index.Rmd")
slidify("index.Rmd")
library(shiny)
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
install.packages('shiny')
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
publish(user = "anupamagalwankar", repo = "Developing_data_products")
publish(user = "anupamagalwankar", repo = "Publishing-slidify-slides")
publish(user = "anupamagalwankar", repo = "Publishing-slidify-slides",host="github.com")
?publish
publish(user = "anupamagalwankar", repo = "Publishing-slidify-slides",host="github")
publish(user = anupamagalwankar, repo = Publishing-slidify-slides,host="github")
publish(user = "anupamagalwankar", repo = "./Publishing-slidify-slides",host="github")
publish(title = 'My Deck', 'index.html', host = 'rpubs')
install.packages(curl)
library(RCurl)
publish(title = 'My Deck', 'index.html', host = 'rpubs')
library(curl)
publish(title = 'My Deck', 'index.html', host = 'rpubs')
publish(user = "anupamagalwankar", repo = "./Publishing-slidify-slides",host="github")
publish(user = "anupamagalwankar", repo = "Publishing-slidify-slides",host="github")
